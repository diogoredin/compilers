%{
char *ver = "bee v1.0 (C)prs, 2014";
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "y.tab.h"
#include "postfix.h"

extern FILE *outfp;
char *dupstr(const char *s);

static long brklbl[20], brkcnt; /* break labels */
/* label _L0 is a break without a while/switch) */

static char *extrns[100]; /* emit externs at the end only */
static int extcnt;

int lbl;
char *mklbl(int n) {
  static char buf[20];
  sprintf(buf, "_i%d", n);
  return strcpy(malloc(strlen(buf)+1),buf);
}

static void outstr(char *s) {
  while (*s) fprintf(outfp, pfCHAR, (unsigned char)*s++);
  fprintf(outfp, pfCHAR, 0);
}
static char *mkfunc(char *s) {
  static char buf[80];
  strcpy(buf, "_");
  strcat(buf, s);
  return buf;
}
static long swif(Node *p, float dens);
#define TRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost);
static int doasm(Node *p) { return strcmp(LEFT_CHILD(LEFT_CHILD(p))->value.s, "asm") ? MAX_COST : 0 ; }
%}
%include "y.tab.h"
%%
stmt:	BLOCK(stmts)
stmt:	DECL(decl,stmt)
decl:	AUTO
decl:	EXTRN(decl, extname)
decl:	END
stmts:	END
stmts:	STMT(stmts,stmt)
extname:	NAME	  { extrns[extcnt++] = dupstr(p->value.s); }
extname:	FUNC	  { extrns[extcnt++] = dupstr(mkfunc(p->value.s)); }

stmt:	expr		1 { fprintf(outfp, pfTRASH, pfWORD); }
stmt:	RETURN(expr)	1 { fprintf(outfp, pfPOP pfLEAVE pfRET); }
stmt:	END

%!stmt:	CALL(LOAD(ADDR),ARG(STRING,END))	doasm { fprintf(outfp, "%s\n", LEFT_CHILD(RIGHT_CHILD(p))->value.s); }
expr:	CALL(LOAD(ADDR),args)	1 { fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(LEFT_CHILD(p))->value.s), (int)(pfWORD*(RIGHT_CHILD(p)->place))); }
args:	ARG(arg,args)	  { p->place =  ((LEFT_CHILD(p)->place) + (RIGHT_CHILD(p)->place)); }
args:	END		  { p->place = 0; }
arg:	expr		1 { p->place = 1; }

expr:	CTE		1 { fprintf(outfp, pfIMM, p->value.i); }
expr:	STRING		1 { lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(lbl)); outstr(p->value.s); fprintf(outfp, pfTEXT pfADDR, mklbl(lbl)); }

expr:	ADD(expr,expr)	1 { fprintf(outfp, pfADD); }
expr:	SUB(expr,expr)	1 { fprintf(outfp, pfSUB); }
expr:	MUL(expr,expr)	1 { fprintf(outfp, pfMUL); }
expr:	DIV(expr,expr)	1 { fprintf(outfp, pfDIV); }
expr:	MOD(expr,expr)	1 { fprintf(outfp, pfMOD); }
expr:	BOR(expr,expr)	1 { fprintf(outfp, pfOR); }
expr:	BXOR(expr,expr)	1 { fprintf(outfp, pfXOR); }
expr:	BAND(expr,expr)	1 { fprintf(outfp, pfAND); }
expr:	LSH(expr,expr)	1 { fprintf(outfp, pfSHTL); }
expr:	RSH(expr,expr)	1 { fprintf(outfp, pfSHTRS); }
expr:	EQ(expr,expr)	1 { fprintf(outfp, pfEQ); }
expr:	NE(expr,expr)	1 { fprintf(outfp, pfNE); }
expr:	LT(expr,expr)	1 { fprintf(outfp, pfLT); }
expr:	LE(expr,expr)	1 { fprintf(outfp, pfLE); }
expr:	GT(expr,expr)	1 { fprintf(outfp, pfGT); }
expr:	GE(expr,expr)	1 { fprintf(outfp, pfGE); }
expr:	UMINUS(expr)	1 { fprintf(outfp, pfNEG); }
expr:	NOT(expr)	1 { fprintf(outfp, pfIMM pfEQ, 0); }
expr:	BNOT(expr)	1 { fprintf(outfp, pfNOT); }
expr:	AND(and,expr)	1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
and:	expr		1 { p->place = ++lbl; fprintf(outfp, pfDUP pfJZ pfTRASH, mklbl(p->place), pfWORD); }
expr:	OR(or,expr)	1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
or:	expr		1 { p->place = ++lbl; fprintf(outfp, pfDUP pfJNZ pfTRASH, mklbl(p->place), pfWORD); }

%! if-else
stmt:	ELSE(if,stmt)	1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
if:	IF(cond,stmt)	1 { p->place = ++lbl; fprintf(outfp, pfJMP pfLABEL,
				mklbl(p->place), mklbl(LEFT_CHILD(p)->place)); }
%! simple if (no else): uses only one label
stmt:	IF(cond,stmt)	1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
cond:	expr		1 { p->place = ++lbl; fprintf(outfp, pfJZ, mklbl(p->place)); }

%! artimetic if ( ? : )
expr:	ARELSE(arif,expr)	1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
arif:	ARIF(cond,expr)	1 { p->place = ++lbl; fprintf(outfp, pfJMP pfLABEL,
				mklbl(p->place), mklbl(LEFT_CHILD(p)->place)); }

%! while
stmt:	WHILE(do,stmt)	 1 { brkcnt--; fprintf(outfp, pfJMP pfLABEL, mklbl(LEFT_CHILD(LEFT_CHILD(p))->place), mklbl(LEFT_CHILD(p)->place)); }
do:	DO(begin,expr) 1 { p->place = (brklbl[++brkcnt] = ++lbl); fprintf(outfp, pfJZ, mklbl(lbl)); }
begin:	START		 1 { p->place = ++lbl; fprintf(outfp, pfLABEL, mklbl(lbl)); }

%! lvalues
lval:	LOCAL		1 { fprintf(outfp, pfLOCAL, p->value.i * (pfWORD/4)); }
lval:	ADDR		1 { fprintf(outfp, pfADDR, p->value.s); }
lval:	LOAD(lval)	1 { fprintf(outfp, pfLOAD); }
lvec:	lval		1 { fprintf(outfp, pfLOAD); }
lval:	INDEX(lvec,expr) 1 { fprintf(outfp, pfIMM pfMUL pfADD, pfWORD); }
expr:	LOAD(lval)	1 { fprintf(outfp, pfLOAD); }
expr:	PTR(lval)	  { /* No code, but keep PTR to avoid missing LOADs */ }

%! pre/post in/de-crement
expr:	INC(CTE, lval)	1 { fprintf(outfp, pfDUP pfINCR pfLOAD, LEFT_CHILD(p)->value.i); }
expr:	DEC(CTE, lval)	1 { fprintf(outfp, pfDUP pfDECR pfLOAD, LEFT_CHILD(p)->value.i); }
expr:	INC(lval, CTE)	1 { fprintf(outfp, pfDUP pfLOAD pfSWAP pfINCR, RIGHT_CHILD(p)->value.i); }
expr:	DEC(lval, CTE)	1 { fprintf(outfp, pfDUP pfLOAD pfSWAP pfDECR, RIGHT_CHILD(p)->value.i); }

%! assignment (multiple assignment)
assign: expr		1 { fprintf(outfp, pfDUP); }
expr:	ASSIGN(assign,lval)	1 { fprintf(outfp, pfSTORE); }
expr:	ASSIGN(expr,LOCAL)	1 { fprintf(outfp, pfDUP pfLOCA, RIGHT_CHILD(p)->value.i * (pfWORD/4)); }
expr:	ASSIGN(expr,ADDR)	1 { fprintf(outfp, pfDUP pfADDRA, RIGHT_CHILD(p)->value.s); }
expr:	ADDR		1 { fprintf(outfp, pfADDRV, p->value.s); }
stmt:	ALLOC(alloc,lval)  1 { fprintf(outfp, pfSTORE); }
alloc:	expr		1 { fprintf(outfp, pfIMM pfMUL pfALLOC pfSP, pfWORD); }

%! switch-case & goto
stmt:	GOTO(expr)	1 { fprintf(outfp, pfBRANCH); }
stmt:	GOTO(LOAD(ADDR))	1 { fprintf(outfp, pfJMP, LEFT_CHILD(LEFT_CHILD(p))->value.s); }
name:	NAME		1 { fprintf(outfp, pfLABEL, p->value.s); }
stmt:	LABEL(name,stmt)
stmt:	CASE(name,stmt)
stmt:	SWITCH(def,stmt) 1 { long def = LEFT_CHILD(p)->place; if (def > 0) fprintf(outfp, pfLABEL, mklbl(def)); fprintf(outfp, pfLABEL pfTRASH, mklbl(brklbl[brkcnt--]), pfWORD); }
def:	DEFAULT(expr)	  { p->place = swif(RIGHT_CHILD(p), 0.5); brklbl[++brkcnt] = ++lbl; }
stmt:	BREAK		1 { fprintf(outfp, pfJMP, mklbl(brklbl[brkcnt])); }

%! jmps
stmt:	JZ(expr,ETIQ)	1 { fprintf(outfp, pfJZ, RIGHT_CHILD(p)->value.s); }
stmt:	JNZ(expr,ETIQ)	1 { fprintf(outfp, pfJNZ, RIGHT_CHILD(p)->value.s); }
stmt:	JMP		1 { fprintf(outfp, pfJMP, p->value.s); }

%! optimizacoes
stmt:	CALL(LOAD(ADDR),args)	1 { fprintf(outfp, pfCALL, mkfunc(LEFT_CHILD(LEFT_CHILD(p))->value.s)); if (RIGHT_CHILD(p)->place) fprintf(outfp, pfTRASH, (int)(pfWORD*(RIGHT_CHILD(p)->place))); }
stmt:	INC(CTE, lval)	1 { fprintf(outfp, pfINCR, LEFT_CHILD(p)->value.i); }
stmt:	DEC(CTE, lval)	1 { fprintf(outfp, pfDECR, LEFT_CHILD(p)->value.i); }
stmt:	INC(lval, CTE)	1 { fprintf(outfp, pfINCR, RIGHT_CHILD(p)->value.i); }
stmt:	DEC(lval, CTE)	1 { fprintf(outfp, pfDECR, RIGHT_CHILD(p)->value.i); }
stmt:	JZ(LT(expr,expr), ETIQ)	1 { fprintf(outfp, pfJGE, RIGHT_CHILD(p)->value.s); }
stmt:	JZ(LE(expr,expr), ETIQ)	1 { fprintf(outfp, pfJGT, RIGHT_CHILD(p)->value.s); }
stmt:	JZ(GT(expr,expr), ETIQ)	1 { fprintf(outfp, pfJLE, RIGHT_CHILD(p)->value.s); }
stmt:	JZ(GE(expr,expr), ETIQ)	1 { fprintf(outfp, pfJLT, RIGHT_CHILD(p)->value.s); }
stmt:	JZ(EQ(expr,expr), ETIQ)	1 { fprintf(outfp, pfJNE, RIGHT_CHILD(p)->value.s); }
stmt:	JZ(NE(expr,expr), ETIQ)	1 { fprintf(outfp, pfJEQ, RIGHT_CHILD(p)->value.s); }
stmt:	JNZ(LT(expr,expr), ETIQ)	1 { fprintf(outfp, pfJLT, RIGHT_CHILD(p)->value.s); }
stmt:	JNZ(LE(expr,expr), ETIQ)	1 { fprintf(outfp, pfJLE, RIGHT_CHILD(p)->value.s); }
stmt:	JNZ(GT(expr,expr), ETIQ)	1 { fprintf(outfp, pfJGT, RIGHT_CHILD(p)->value.s); }
stmt:	JNZ(GE(expr,expr), ETIQ)	1 { fprintf(outfp, pfJGE, RIGHT_CHILD(p)->value.s); }
stmt:	JNZ(EQ(expr,expr), ETIQ)	1 { fprintf(outfp, pfJEQ, RIGHT_CHILD(p)->value.s); }
stmt:	JNZ(NE(expr,expr), ETIQ)	1 { fprintf(outfp, pfJNE, RIGHT_CHILD(p)->value.s); }
%%
void externs()
{
  int i;
  
  for (i = 0; i < extcnt; i++)
    if (extrns[i])
      fprintf(outfp, pfEXTRN, extrns[i]);
}

void variable(char *name, Node *vc, Node *init)
{
  int i = 0, siz = 1;
  fprintf(outfp, pfGLOBL pfDATA pfALIGN pfLABEL, name, pfOBJ, name);
  if (vc->type == nodeInt) siz = vc->value.i;
  if (vc->attrib == DIM) {
    lbl++;
    fprintf(outfp, pfID pfLABEL, mklbl(lbl), mklbl(lbl));
  }
  if (init) {
    for (i = 0; i < init->value.sub.num; i++)
      switch (init->CHILD(i)->attrib) {
        case CTE: fprintf(outfp, pfWORD == 4 ? pfINTEGER : pfLONG, init->CHILD(i)->value.i); break;
	case NAME: fprintf(outfp, pfID, init->CHILD(i)->value.s); break;
	case STRING: { char *l = mklbl(++lbl);
			fprintf(outfp, pfRODATA pfALIGN pfLABEL, l);
			outstr(init->CHILD(i)->value.s);
			fprintf(outfp, pfDATA pfID, l); break; }
      }
    if (i < siz)  fprintf(outfp, pfBYTE, pfWORD * (siz - i));
  }
  else fprintf(outfp, pfBYTE, pfWORD * siz);
  for (i = 0; i < extcnt; i++)
    if (extrns[i] && strcmp(extrns[i], name) == 0) extrns[i] = 0;
}

void function(char *name, int enter, Node *stmt)
{
  int i;
  extern int errors, trace;
  extern char **yynames;
  if (errors) return;
  if (trace) printNode(stmt, 0, yynames);
  fflush(stdout);
  fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, mkfunc(name), pfFUNC, mkfunc(name), enter * (pfWORD/4));
  yyselect(stmt);
  fprintf(outfp, pfLEAVE pfRET); /* just in case ... */
  freeNode(stmt);
  for (i = 0; i < extcnt; i++)
    if (extrns[i] && strcmp(extrns[i], mkfunc(name)) == 0) extrns[i] = 0;
}

static long swif(Node *p, float dens)
{
  int i;

#ifdef NOTAB
  static long switab(Node *p, float density);
  switab(p, dens);
#endif

  for (i = 0; i < p->value.sub.num; i++)
    if (p->CHILD(i)->attrib == CASE)
      fprintf(outfp, pfDUP pfIMM pfJEQ, p->CHILD(i)->CHILD(1)->value.i, p->CHILD(i)->CHILD(0)->value.s);
  for (i = 0; i < p->value.sub.num; i++)
    if (p->CHILD(i)->attrib == DEFAULT) {
      fprintf(outfp, pfJMP, p->CHILD(i)->CHILD(0)->value.s);
      return -1;
    }
  fprintf(outfp, pfJMP, mklbl(++lbl));
  return lbl;
}

#ifndef NOTRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost)
{
	int op = OP_LABEL(p);
	YYCONST char *tname = yytermname[op] ? yytermname[op] : "?";
	/* fprintf(stderr, "0x%lx:%s matched %s with cost %d vs. %d\n", (long)p, tname, yystring[eruleno], cost, bestcost); */
	if (cost >= MAX_COST && bestcost >= MAX_COST) {
	  extern char **yynames;
	  fprintf(stderr, "0x%lx:%s NO MATCH %s with cost %d vs. %d\n", (long)p, tname, yystring[eruleno], cost, bestcost);
	  printNode(p, 0, yynames);
	}
}
#endif

#ifdef NOTAB
/* SWITAB code ... */
static char *dolbl(Node *p, int val, int def);
static void gen(int v[], int b[], int lb, int ub, Node *p, int def);
static int cmp(int *a, int *b) { return *a - *b; }

static long switab(Node *p, float density)
{
  int opts[1000], nopt = 0;
  int buckets[1000], k, n, i;
  int min, max, def = ++lbl, tmp = 0;
  extern char **yynames;

  fprintf(outfp, pfCOMM, "switab");
  printNode(p, 0, yynames); 
  for (i = 0; i < p->value.sub.num; i++)
    if (p->CHILD(i)->attrib == CASE)
      opts[nopt++] = p->CHILD(i)->CHILD(1)->value.i;
    else tmp = 1;

  max = min = opts[0];
  for (i = 0; i < nopt; i++) {
    if (max < opts[i]) max = opts[i];
    if (min > opts[i]) min = opts[i];
  }

  qsort(opts, nopt, sizeof(int), (int(*)(const void *, const void *))cmp);

  for (i = 0; i < nopt; i++)
    printf(" %d", opts[i]);
  printf("-> [%d, %d] #%d => %d%%\n", min, max, nopt, 100*nopt/(max - min + 1));

  for (n = k = 0; k < nopt; k++, n++) {
    /* first case index in the new bucket */
    buckets[n] = k;
/* determine the density of merging this bucket with the previous one */
#define den(i,j) ((j-buckets[i]+1.0)/(opts[j]-opts[buckets[i]]+1))
/* while density is not below threshold, merge buckets (from last to first) */
     while (n > 0 && den(n-1, k) >= density)
	n--; /* throw away the n-th bucket (this bucket is now the previous) */
  }
  /* this is not a bucket, just a marker to determine the last case index
   * in the previous bucket (which is 'bucket[n]-1') */
  buckets[n] = nopt;

  /* print first case index (not value) of each bucket */
  printf("%d buckets:", n);
  for (i = 0; i < n; i++)
    printf(" %d->%d", opts[buckets[i]], opts[buckets[i+1]-1]);
  printf("\n");

  printf("; switch ( val )\n; %s is default [end=%d]\n", dolbl(p, def, def), def);
  gen(opts, buckets, 0, n-1, p, def);
  if (tmp == 0) printf("%s:\n", dolbl(p, def, def));
  return tmp ? -1 : def;
}

static char *dolbl(Node *p, int val, int def)
{
  int i;

  if (def == 0) /* not a default */
    for (i = 0; i < p->value.sub.num; i++)
      if (p->CHILD(i)->attrib == CASE)
	if (p->CHILD(i)->CHILD(1)->value.i == val)
	  return p->CHILD(i)->CHILD(0)->value.s;
  if (def == val)
    for (i = 0; i < p->value.sub.num; i++)
      if (p->CHILD(i)->attrib == DEFAULT)
	return p->CHILD(i)->CHILD(0)->value.s;
  return mklbl(val);
}

static void gen(int v[], int b[], int lb, int ub, Node *p, int deflab)
{
  int i, l, u, k = (lb + ub)/2;
  int lolab = deflab, hilab = deflab;

  if (k > lb) lolab = ++lbl;
  if (k < ub) hilab = ++lbl;
  l = b[k];
  u = b[k+1] - 1;
  if (u - l + 1 <= 3) { /* if sequence for buckets with upto 3 cases */
    for (i = l; i <= u; i++)
      printf("if (val == %d) goto %s\n", v[i], dolbl(p, v[i], 0));
    if (k > lb)
      printf("if (val > %d) goto %s\n", v[u], dolbl(p, hilab, deflab));
    else if (k < ub)
      printf("if (val < %d) goto %s\n", v[l], dolbl(p, lolab, deflab));
    else printf("goto %s\n", dolbl(p, lolab, deflab));
  } else { /* table jmp for larger (4+ cases) buckets */
    printf("if (val < %d) goto %s\n", v[l], dolbl(p, lolab, deflab));
    printf("if (val > %d) goto %s\n", v[u], dolbl(p, hilab, deflab));
    printf("jmp table[(val - %d) * %d]\n", v[l], pfWORD);
    printf("; jmp [(table - %d) + val * %d]\n", v[l]*pfWORD, pfWORD);
      printf("; from v[%d]=%d to v[%d]=%d\n", l, v[l], u, v[u]);
    for (i = v[l]; i <= v[u]; i++)
      if (v[l] == i)
	printf("\tgoto %s\t; %d\n", dolbl(p, v[l++], 0), i);
      else
	printf("\tgoto %s\t; %d\n", dolbl(p, deflab, deflab), i);
  }
  if (k > lb) {
    printf("%s:\n", dolbl(p, lolab, deflab));
    gen(v, b, lb, k - 1, p, deflab);
  }
  if (k < ub) {
    printf("%s:\n", dolbl(p, hilab, deflab));
    gen(v, b, k + 1, ub, p, deflab);
  }
}
#endif /* NOTAB */
