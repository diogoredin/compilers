V2.4:
- generates a maximal-munch selector with the -m flag. Selection costs can be used: the rule can be selected if cost<BURG_MAX.
- using -mm produces an extended maximal-munch that supports more complex grammars.
- added support for '//' comments in user source code.
- the -n flag suppresses the generation of '#line' directives, to enable full debug.
V2.3:
- Java support:
  * the generated class includes methods:
    > .panic() called on unrecoverable errors
    > .trace() prints costs selection steps, when generated with -T flag
    > .label() labels the tree with costs in a state attached to each node
    > .reduce() iterates the tree and generates the selected code
    > .select() top level rotine that labels the tree and then generates the code
  * the tree class is assumed to provide:
    > .left() for unary and .left() and .right() for binary tree nodes, returnining the respective subnodes.
    > .label() returns each node label
    > .state(Object) sets the instruction selection computed costs into the tree node, and .object() returns it.
- added -J flag, generates class Selector in Selector.java
- the argument of the -p flag is used to change the name of the generated class
- the syntactic tree is assumed to be of the class Tree, and can be changed by the -JNewTree name
- the %include assumes that the included class is generated by byaccj
V2.2:
- C++ support
V2.1:
- default prefix is 'yy'
- selection rotine is yyselect
- removed -R flag, yyselect and yyreduce are always generated
- yytrace and yypanic are generated if TRACE and PANIC are not defined in the declaration section
- yytrace also prints the node label of each match
- more information displayed in yypanic messages
- defines the macros PBURG_PREFIX, PBURG_VERSION and MAX_COST
- string vector of terminals (yytermname) is generated
- block are no longer mandatory
- generate code references to the original code (#line)
- error messages include the name of the input file
- when -T is set, yyselect issues a warning when no match is found (as before, is always returns 1 when no match is found and 0 on success)
V2.0:
- selection rotine has fixed name 'int select(NODEPTR_TYPE)' and returns 1 on error (unable to select) and 0 on success.
v1.4:
- added %! comments
- added -A flag, stop at first non-define in %include files
- removed -I flag, as strings are always emited
- removed rule numbers since a code block is required, as well as the assign operator that preceeded it
- costs do not use brackets around them
- costs can be variable if the identifier of a cost rotine is used as cost value
v1.3:
- scanning is performed with lex (allows additional features, see below)
- added %include
- added support for characters as initializers for terminal names
- blocks can be used in rules, as well as rules numbers (use one or another)
- added -R flag to emit the reduce code, as well as the full selection code (parse) that emits the reduce code once the label as been sucessfuly performed
- added -v flag to print the version number
