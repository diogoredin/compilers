%{
#include <stdio.h>
#include "node.h"
#include "tabid.h"
#include "y.tab.h"
#include "postfix.h"

extern FILE *yyout;
static int lbl;
static long brklbl[20], brkcnt;
static char *mklbl(int n);
static char *mkfunc(char *s);
static void outstr(char *s);
extern int yyerror(char *s);
%}

%include "y.tab.h"

%term ADD='+' SUB='-' MUL='*' DIV='/' MOD='%' LT='<' GT='>' EQU='=' AND='&' OR='|'
%term FUNC='(' END=';' COM=',' BLCK='{' INDEX='['

%start prog
%%

%! Program, Functions and Declarations
prog: decl 1 					{}
decl: func 1 					{}
func: FUNC(blockp,params) 1		{}
params: param 1 				{}
params: COM(params,param) 1 	{}
param: PARAM(type,ID) 1			{}
type: INTEGER 1 				{}
type: STRING 1 					{}
type: NUMBER 1 					{}
blockp: block 1 				{}
block: NIL 1 					{}

%! Block and base
block: BLCK(list,decls) 1		{}
list: base 1					{}
list: END(list,base) 1			{}
decls: NIL 1					{}
decls: END(decls,param) 1		{}
base: VOID 1 					{}
base: NIL 1 					{}
base: expr 1					{ fprintf(yyout, pfTRASH, pfWORD); }
base: block 1					{}

%! If Then Else
stmt: base 1					{}
stmt: BREAK 1					{}
stmt: CONTINUE 1				{}
base: if 1						{}
if: IF(cond,stmt) 1				{ p->place = ++lbl; fprintf(yyout, pfJMP pfLABEL, mklbl(p->place), mklbl(LEFT_CHILD(p)->place)); }
base: ELSE(if, stmt) 1			{ fprintf(yyout, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
cond: expr 1					{ p->place = ++lbl; fprintf(yyout, pfJZ, mklbl(p->place)); }

%! While and Do
stmt: WHILE(do,stmt) 1			{ brkcnt--; fprintf(yyout, pfJMP pfLABEL, mklbl(LEFT_CHILD(LEFT_CHILD(p))->place), mklbl(LEFT_CHILD(p)->place)); }
do:	DO(begin,expr) 1			{ p->place = (brklbl[++brkcnt] = ++lbl); fprintf(yyout, pfJZ, mklbl(lbl)); }
begin: START 1					{ p->place = ++lbl; fprintf(yyout, pfLABEL, mklbl(lbl)); }

%! Arguments and Expressions
args: COM(expr,args) 1			{}
args: COM(expr,NIL) 1			{}
expr: CALL(ID,args) 1			{ fprintf(yyout, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s), (int)(pfWORD*(RIGHT_CHILD(p)->place))); }
expr: CALL(ID,VOID) 1			{ fprintf(yyout, pfCALL, mkfunc(LEFT_CHILD(p)->value.s)); }
expr: STR 1						{ lbl++; fprintf(yyout, pfRODATA pfALIGN pfLABEL, mklbl(lbl)); outstr(p->value.s); fprintf(yyout, pfTEXT pfADDR, mklbl(lbl)); }
expr: INT 1						{ fprintf(yyout, pfIMM, p->value.i); }
expr: REAL 1					{}

%! lvalues
expr: PTR(lval)               	{ /* No code, but keep PTR to avoid missing LOADs */ }
lval: INDEX(lvec,expr) 1      	{ fprintf(yyout, pfIMM pfMUL pfADD, pfWORD); }
lvec: lval 1                  	{ fprintf(yyout, pfLOAD); }
lval: LOCAL 1                 	{ fprintf(yyout, pfADDR, p->value.s); }
lval: ID 1                    	{ fprintf(yyout, pfLOCAL, p->user); /* position calculated in yacc */ }

%! Atribution
assign: expr 1                	{ fprintf(yyout, pfDUP); }
expr: ATR(assign,lval) 1		{ fprintf(yyout, pfSTORE); /* Allows assignments of assignments */ }

%! Operations with Expressions
expr: ADD(expr,expr) 1        	{ fprintf(yyout, pfADD); }
expr: SUB(expr,expr) 1        	{ fprintf(yyout, pfSUB); }
expr: MUL(expr,expr) 1        	{ fprintf(yyout, pfMUL); }
expr: DIV(expr,expr) 1        	{ fprintf(yyout, pfDIV); }
expr: MOD(expr,expr) 1        	{ fprintf(yyout, pfMOD); }
expr: LT(expr,expr) 1        	{ fprintf(yyout, pfLT); }
expr: GT(expr,expr) 1         	{ fprintf(yyout, pfGT); }
expr: GE(expr,expr) 1         	{ fprintf(yyout, pfGE); }
expr: LE(expr,expr) 1         	{ fprintf(yyout, pfLE); }
expr: NE(expr,expr) 1         	{ fprintf(yyout, pfNE); }
expr: EQU(expr,expr) 1        	{ fprintf(yyout, pfEQ); }
expr: AND(and,expr) 1         	{ fprintf(yyout, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
and: expr 1                  	{ p->place = ++lbl; fprintf(yyout, pfDUP pfJZ pfTRASH, mklbl(p->place), pfWORD); }
expr: OR(or,expr) 1           	{ fprintf(yyout, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
or:	expr 1                    	{ p->place = ++lbl; fprintf(yyout, pfDUP pfJNZ pfTRASH, mklbl(p->place), pfWORD); }

%! Increment and Decrement
expr: INCR(lval) 1				{ fprintf(yyout, pfDUP pfINCR pfLOAD, 1); }
expr: DECR(lval) 1				{ fprintf(yyout, pfDUP pfDECR pfLOAD, 1); }
expr: POSINC(lval) 1			{ fprintf(yyout, pfDUP pfLOAD pfSWAP pfINCR, 1); }
expr: POSDEC(lval) 1			{ fprintf(yyout, pfDUP pfLOAD pfSWAP pfDECR, 1); }

%%

extern char **yynames;

static int sameVar(NODEPTR_TYPE p) {
	return strcmp(LEFT_CHILD(p)->value.s, LEFT_CHILD(RIGHT_CHILD(p))->value.s) ? 0x7fff : 2;
}

static int data(int t, char *s, int a, int user) {
	if (s) fprintf(yyout, pfLABEL pfINTEGER, s, 0);
	return 1;
}

static char *mklbl(int n) {
	static char buf[20];
	sprintf(buf, "_i%d", n);
	return strdup(buf);
}

static char *mkfunc(char *s) {
	static char buf[80];
	strcpy(buf, "_");
	strcat(buf, s);
	return buf;
}

static void outstr(char *s) {
	while (*s) fprintf(yyout, pfCHAR, (unsigned char)*s++);
	fprintf(yyout, pfCHAR, 0);
}

/******************************************************************
*
*	CODE PRODUCTION FOR BURG (called on YACC)
*
*******************************************************************/

/* Original evaluation */
void evaluate(Node *p) {
	extern int trace, errors;

	if (errors) return;
	if (trace) printNode(p, stdout, yynames);

	fprintf(yyout, pfTEXT pfALIGN pfGLOBL pfLABEL, "_entry", pfFUNC, "_entry");

	yyselect(p);
	fprintf(yyout, pfRET pfDATA);

	IDevery(data,0);
	fprintf(yyout, pfEXTRN pfEXTRN pfEXTRN pfEXTRN, "_prints", "_printi", "_println", "_readi");
}

/* Function evaluation */
void functionEvaluate(char *name, int enter, Node *body) {

	int i;
	int overflow = 32;
	int IDPosition = IDfind(name,0);

	/* Print Tree of function */
	extern int trace;
	printNode(body, stdout, yynames);

	/* Stack overflow */
	if (IDPosition > overflow) {
		IDPosition = IDPosition - overflow;
	}

	/* Left Child is blocop */
	if (LEFT_CHILD(body)->value.s == 0 || LEFT_CHILD(body)->attrib == NIL) {
		fprintf(yyout, pfEXTRN, mkfunc(name));

	} else {

		/* ENTRY Function */
		if (strcmp(name, "entry") == 0) {
			fprintf(yyout, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, "_entry", pfFUNC, "_entry", enter);

		/* OTHER Functions */
		} else {
			fprintf(yyout, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, mkfunc(name), pfFUNC, mkfunc(name), enter);
		}

		/* yyselect inits instruction selection for rest of the tree */
		if (yyselect(body) == 1) {
			yyerror("No match found.");
		}

		/* Return functions */
		if (IDPosition != 0) {
			fprintf(yyout, pfLOCAL pfPOP pfLEAVE pfRET, -4); /* -4 assumes int */
		} else {
			fprintf(yyout, pfLEAVE pfRET);
		}

	}
}

/* Declare evaluation */
void declareEvaluate(char *type, char *name, int enter, Node *init) {

	int i;
	int overflow = 32;
	int IDPosition = IDfind(name,0);

	/* Stack overflow */
	if (IDPosition > overflow) {
		IDPosition = IDPosition - overflow;
	}

	/* CONST */
	if (strcmp(type, "CONST") == 0) {
		fprintf(yyout, pfDATA pfALIGN pfLABEL, name);
	}

	/* INTEGER, STRING or NUMBER */
	else if (strcmp(type, "TYPE") == 0) {
		fprintf(yyout, pfDATA pfALIGN pfLABEL, name);
	}

	/* Declare the appriate type of variable */
	switch(init->type) {
		case nodeInt:
			fprintf(yyout, pfINTEGER, init->value.i);
			break;

		case nodeReal:
			fprintf(yyout, pfFLOAT, init->value.r);
			break;

		case nodeStr:
			fprintf(yyout, pfSTR, init->value.s);
			break;
	}

}
