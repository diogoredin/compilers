%{

#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include "node.h"
#include "tabid.h"
#include "postfix.h"
#include "y.tab.h"

static int sameVar(NODEPTR_TYPE p) {
	return strcmp(LEFT_CHILD(p)->value.s, LEFT_CHILD(RIGHT_CHILD(p))->value.s) ? 0x7fff : 2;
}

extern FILE *outfp;

int lbl;
char *mklbl(int n) {
  static char buf[20];
  sprintf(buf, "_i%d", n);
  return strcpy(malloc(strlen(buf)+1),buf);
}

static void outstr(char *s) {
  while (*s) fprintf(outfp, pfCHAR, (unsigned char)*s++);
  fprintf(outfp, pfCHAR, 0);
}

%}

%include "y.tab.h"

%term END=';' ASSIGN='=' ADD='+' SUB='-' MUL='*' DIV='/' MOD='%' LT='<' GT='>' FUNC='(' COM=','
%start finit

%%
finit: FUNC(param) 1 { fprintf(outfp, "%s", "test"); }
param: PARAM(STRING, ID) 0 { fprintf(outfp, "%s", "test"); }
%%

extern char **yynames;

static int data(int t, char *s, int a, int user) {
	if (s) fprintf(outfp, pfLABEL pfINTEGER, s, 0);
	return 1;
}

void evaluate(Node *p) {
	extern int trace, errors;

	if (errors) return;
	if (trace) printNode(p, stdout, yynames);

	fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL, "_main", pfFUNC, "_main");
	
	yyselect(p);
	fprintf(outfp, pfRET pfDATA);

	IDevery(data,0);
	fprintf(outfp, pfEXTRN pfEXTRN pfEXTRN pfEXTRN, "_prints", "_printi", "_println", "_readi");
}