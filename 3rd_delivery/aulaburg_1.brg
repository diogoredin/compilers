%{
    #include "node.h"
    #include <stdio.h>
    int reg = 0; /* Ou 1 */
    #include "y.tab.h"
%}

%include "y.tab.h"
%term PROG=';' ADD='+' ASSIGN='='

%%

file: PROG(expr)                            1 { printf("ret\n"); /* Tem de fazer return da Ã¡rvore inteira */ }
expr: ID                                    1 { printf("mov r %d %s \n", reg , p->value.s); if(reg == 0) reg++; }
expr: CONST                                 1 { printf("mov r %d %s \n", reg , p->value.i); if(reg == 0) reg++; }
expr: ADD(expr, expr)                       1 { printf("add r0 r1\n"; }
expr: ASSIGN(ID, expr)                      1 { printf("mov [%s], r0\n", LEFT_CHILD(p)->value.s; }
expr: ADD(expr, CONST)                      1 { printf("add r0, %d\n", RIGHT_CHILD(p)->value.i; }
expr: ADD(CONST, expr)                      1 { printf("add r0, %d\n", LEFT_CHILD(p)->value.i; }
expr: ADD(CONST, CONST)                     1 { printf("add r0, %d\n", LEFT_CHILD(p)->value.i + RIGHT_CHILD(p)->value.i; } /* Optimization constant folding -> soma ja feita no compilador */
expr: ASSIGN(ID, ADD(ID,expr))              sameVar /* 1 ou max cost */ { printf("mov[%s], %d", CHILDS ... }
expr: ASSIGN(ID, ADD(expr, ID))             otherVar /* 1 ou max cost */
expr: ASSIGN(ID, ADD(ID, CONST))            sameVar /* 1 ou max cost */ { printf("mov[%s], %d", CHILDS ... }
expr: ASSIGN(ID, ADD(CONST, ID))            otherVar /* 1 ou max cost */

%%

int sameVar(Node* n) {
    return strcmp(LEFT_CHILD(p)->value.s, LEFT_CHILD(RIGHT_CHILD(p))->value.s) == 0 ? 1 : MAX_COST; }
}