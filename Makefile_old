LANG=diy
EXT=diy # file extension: .$(EXT)
LIB=lib # compiler library directory
UTIL=util # compiler library: lib$(LIB).a
RUN=run # runtime directory
EXS=exs # examples directory
CC=gcc
CFLAGS=-g -DYYDEBUG


$(LANG): $(LANG).y $(LANG).l
	make -C $(LIB)
	byacc -dv $(LANG).y
	flex -l $(LANG).l
	$(LINK.c) -o $(LANG) $(ARCH) -I$(LIB) lex.yy.c y.tab.c yyselect.c -L$(LIB) -l$(UTIL)

examples:: $(LANG)
	make -C $(EXS)

clean::
	make -C $(LIB) clean
	make -C $(RUN) clean
	make -C $(EXS) clean
	rm -f *.o $(LANG) lex.yy.c y.tab.c y.tab.h y.output yyselect.c *.asm *~


# Geração do analisador lexical (gera o ficheiro lex.yy.c)
flex -l diy.l

# Geração do analisador sintáctico (gera os ficheiros y.tab.c, y.tab.h e y.output)
yacc -dv diy.y

# Geração dos ficheiros objecto relocatáveis
gcc -g -c -DYYDEBUG -I lib y.tab.c lex.yy.c

# Geração do compilador (geração de código para i386)
gcc -o diy y.tab.o lex.yy.o -L lib -lutil -lfl

# Compilar um ficheiro fonte para produzir o respectivo ficheiro assembly
./diy hello.diy